const hamburgerButton = document.getElementById ('hamburgerButton');
const mobileMenu = document.querySelector ('#hamburgerMenu');

hamburgerButton.addEventListener('click', function (event) {
  event.preventDefault();

  hamburgerButton.classList.toggle('is-active');
  mobileMenu.classList.toggle('active');

});;let myMap;

const init = () => {
  myMap = new ymaps.Map("map", {
    center: [55.751285, 37.600766],
    zoom: 14,
    controls: [],
});

const coords = [
  [55.758696, 37.582344],
  [55.757849, 37.626111],
  [55.749427, 37.605511],
  [55.744596, 37.581264],
];

const myCollection = new ymaps.GeoObjectCollection({}, {
  draggable: false,
  iconLayout: 'default#image',
  iconImageHref: "/img/design/marker.png",
  iconImageSize: [46, 57],
  iconImageOffset: [-35, -52],
});

coords.forEach(coord => {
  myCollection.add(new ymaps.Placemark(coord));
});

myMap.geoObjects.add(myCollection);

myMap.behaviors.disable('scrollZoom');
};

ymaps.ready(init);;const validateFields = (form, fieldsArray) => {
  fieldsArray.forEach(field => {
    field.removeClass("form__input-error");

    if (field.val().trim() === "") {
      field.addClass("form__input-error");
    }
  });

  const errorFields = form.find(".form__input-error");

  return errorFields.length === 0;
}

$('.form').submit(e => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $("#modal");
  const content = modal.find(".modal__content");

  modal.removeClass("error-modal")

  const isValid = validateFields (form, [name, phone, comment, to]);


  if (isValid) {
    $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: "post",
      data: {
        name: name.val(),
        phone: phone.val(),
        comment: comment.val(),
        to: to.val(),
        },
        success: (data) => {
          content.text(data.message)
             $.fancybox.open({
              src: ".modal",
              type : 'inline',
    });
  },
    error: (data) => {
      const message = data.responseJSON.message;
      content.text(message);
      console.log(data);
      modal.addClass("error-modal");
      $.fancybox.open({
        src: ".modal",
        type : 'inline',
      });
    },
    });
  }
});

$(".app-close-modal").click(e => {
  e.preventDefault();

  $.fancybox.close ();
})

;// let player;
// const playerContainer = $('.player');

// let eventsInit = () => {
//   $(".player__start").click(e => {
//     e.preventDefault();

//     if (playerContainer.hasClass("paused")) {
//       player.pauseVideo();
//     } else {
//       player.playVideo();
//     }
//   });

//   $(".player__playback").click(e => {
//     const bar = $(e.currentTarget);
//     const clickedPosition = e.originalEvent.layerX;
//     const newButtonPositionPercent = (clickedPosition / bar.width()) * 100;
//     const newPlaybackPositionSec = (player.getDuration() / 100) * newButtonPositionPercent;

//     $(".player__playback-button").css({
//       left: `${newButtonPositionPercent}%`
//     });

//     player.seekTo(newPlaybackPositionSec);
//   });

//   $(".player__splash").click(e => {
//     player.playVideo();
//   });
// };

// const formatTime = timeSec => {
//   const roundTime = Math.round(timeSec);

//   const minutes = addZero(Math.floor(roundTime / 60));
//   const seconds = addZero(roundTime - minutes * 60);

//   function addZero (num) {
//     return num < 10 ? `0${num}` : num;
//   }

//   return `${minutes} : ${seconds}`;
// }

// const onPlayerReady = () => {
//   let interval;
//   const durationSec = player.getDuration();

//   $(".player__duration-estimate").text(formatTime(durationSec));

//   if (typeof interval != `undefined`) {
//     clearInterval(interval);
//   }

//   interval = setInterval (() => {
//     const completedSec = player.getCurrentTime();
//     const completedPercent = (completedSec / durationSec) * 100;

//     $(".player__playback-button").css({
//       left: `${completedPercent}%`
//     });

//     $(".player__duration-complited").text(formatTime(completedSec));
//   }, 1000);
// };

// const onPlayerStateChange = event => {
// /*
// -1 (воспроизведение видео не начато)
// 0 (воспроизведение видео завершено)
// 1 (воспроизведение)
// 2 (пауза)
// 3 (буферизация)
// 5 (видео подают реплики)
// */
//   switch (event.data) {
//     case 1:
//       playerContainer.addClass("active");
//       playerContainer.addClass("paused");
//       break;

//     case 2:
//       playerContainer.removeClass("active");
//       playerContainer.removeClass("paused");
//       break; 
//   }
// };

// function onYouTubeIframeAPIReady() {
//   player = new YT.Player('yt-player', {
//     height: '392',
//     width: '662',
//     videoId: 'Dd1VIeTMGQs',
//     events: {
//       onReady: onPlayerReady,
//       onStateChange: onPlayerStateChange,
//     },
//     playerVars: {
//       controls: 0,
//       disablekb: 0,
//       showinfo: 0,
//       rel: 0,
//       autoplay: 0,
//       modestbranding: 0,
//     }
//   });
// }

// eventsInit();

  const mesureWidth = item => {
  let reqItemWidth = 0;
  const screenWidth = $(window).width();
  const container = item.closest(".products-menu");
  const titleBlock = container.find(".products-menu__title");
  const titleWidth = titleBlock.width() * titleBlock.length;

  const textContainer = item.find(".products-menu__container");
  const paddingLeft = parseInt(textContainer.css("padding-left"));
  const paddingRight = parseInt(textContainer.css("padding-right"));

  const isMobile = window.matchMedia("(max-width: 768px)").matches;

  if (isMobile) {
    reqItemWidth = screenWidth - titleWidth;
  } else {
    reqItemWidth = 500;
  }

  return {
    container: reqItemWidth,
    textContainer: reqItemWidth - paddingRight - paddingLeft
  }
};

const closeEveryItemInContainer = (container) => {
  const items = container.find(".produts-menu__item");
  const content = container.find(".products-menu__content");

  items.removeClass("active");
  content.width(0);
};

const openProduct = (item) => {
  const hiddenContent = item.find(".products-menu__content");
  const reqWidth = mesureWidth(item);
  const textBlock = item.find(".products-menu__container");

  item.addClass("active");
  hiddenContent.width(reqWidth.container);
  textBlock.width(reqWidth.textContainer);
};

$(".products-menu__title").on("click", e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const item = $this.closest(".produts-menu__item");
  const productOpened = item.hasClass("active");
  const container = $this.closest(".products-menu");

  if (productOpened) {
    closeEveryItemInContainer(container)
  } else {
    closeEveryItemInContainer(container);
    openProduct(item);
  }
});

$(".products-menu__close").on("click", e => {
  e.preventDefault();

  closeEveryItemInContainer($('.products-menu'));
});;const findBlockByAlias = alias => {
  return $(".rewievs__item").filter((ndx, item) => {
    return $(item).attr("data-linked-with") === alias;
  })
}

$(".interactive-avatar__link").click(e=> {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-open");
  const itemToShow = findBlockByAlias (target);
  const curItem = $this.closest(".rewievs__switcher-item");

  itemToShow.addClass("active--class").siblings().removeClass("active--class")
  curItem.addClass("interactive-avatar--active").siblings().removeClass("interactive-avatar--active");

});;const left = document.querySelector("#left");
const right = document.querySelector("#right");
const itemsList = document.querySelector("#items");

const loop = (direction, e) => {
  e.preventDefault();

  if (direction === "right") {
    itemsList.appendChild(itemsList.firstElementChild);
  } else {
    itemsList.insertBefore(itemsList.lastElementChild, items.firstElementChild);
  }
};

right.addEventListener("click", (e) => {
  loop("right", e);
});

left.addEventListener("click", (e) => {
  loop("left", e);
});
// $('.shop__list').bxSlider();;const sections = $(".section");
const display = $(".maincontent");
const sideMenus = $(".fixed-menu");
const body = document.body;

// const mobileDetect = new MobileDetect(window.navigator.userAgent);
// const isMobiles = mobileDetect.mobile();

let inScroll = false;

sections.first().addClass("active");

const countSectionPosition = (sectionEq) => {
  return sectionEq * -100;
}

const changeMenuThemeForSection = (sectionEq) => {
  const currentSections = sections.eq(sectionEq);
  const menuTheme = currentSections.attr("data-sidemenu-theme");
  const activeClasssideMenu = "fixed-menu--shadowed";

  if (menuTheme === "white") {
    sideMenus.addClass(activeClasssideMenu);
  } else {
    sideMenus.removeClass(activeClasssideMenu);
  }
};

const performTransition = (sectionEq) => {

  if (inScroll === false) {
    inScroll = true;
    const position = countSectionPosition(sectionEq);

    const transitionOver = 1000;
    const mouseInertialOver = 300;


    changeMenuThemeForSection(sectionEq);

    display.css({
      transform: `translateY(${position}%)`,
    });

    sections.eq(sectionEq).addClass("active").siblings().removeClass("active");

    setTimeout(() => {
      inScroll = false;
      sideMenus.find(".fixed-menu__item").eq(sectionEq).addClass("fixed-menu__item--active").siblings().removeClass("fixed-menu__item--active");
    }, transitionOver + mouseInertialOver);
  }
};

const viewportScroller = () => {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next () {
      if (nextSection.length) {
        performTransition(nextSection.index());
      }
    },
    prev () {
      if (prevSection.length) {
        performTransition(prevSection.index());
      }
    }
  }

}

$(window).on("wheel", e => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next();
  }

  if (deltaY < 0) {
    scroller.prev();
  }
});

$(window).on("keydown", e => {

  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName === "input" || tagName === "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return;

    switch (e.keyCode) {
      case 38: //prev
      scroller.prev();
      break;
  
      case 40: //next
      scroller.next();
      break;
  }
});

$(".wrapper").on("touchmove", e => e.preventDefault());

$("[data-scroll-to]").click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target =$this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);

 performTransition(reqSection.index()); 
});

// if (isMobiles) {
//   //https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
// $("body").swipe({
//   swipe: function (event, direction) {
//     const scroller = viewportScroller();
//     let scrollDirection = "";

//     if (direction === "up") scrollDirection = "next";
//     if (direction === "down") scrollDirection = "prev";

//     scroller[scrollDirection]();
//   },
// });
// };

;const openItem = item => {
  const container = item.closest(".humans__item");
  const contentBlock = container.find(".human__desc-class");
  const textBlock = contentBlock.find(".human__desc-class-block");
  const reqHeigh = textBlock.height();

  container.addClass("active");
  contentBlock.height(reqHeigh);
}

const closedEveryItem = container => {
  const items = container.find('.human__desc-class');
  const itemContainer = container.find(".humans__item");

  itemContainer.removeClass("active")
  items.height(0);
}

$('.human__desc-name').click(e => {
  const $this = $(e.currentTarget);
  const container = $this.closest('.humans');
  const elemContainer = $this.closest(".humans__item");

  if (elemContainer.hasClass("active")) {
    closedEveryItem(container);
  } 
   else {
    closedEveryItem(container);
    openItem($this);
    }
});;const playBtn = document.querySelector(".video__player-img");
const playerPlayBtn = document.querySelector(".duration__img");
const video = document.getElementById("player");
const durationControl = document.getElementById("durationlevel");
const soundControl = document.getElementById("miclevel");
const soundBtn = document.getElementById("soundbtn");
const dynamicBtn = document.getElementById('dynamic');
let intervalId;
let soundLevel;

window.addEventListener('load', function () {
  video.addEventListener('click', playStop);
  let playButtons = document.querySelectorAll(".play");

  for (let i=0; i < playButtons.length; i++) {
    playButtons[i].addEventListener('click', playStop);
  }

  durationControl.min = 0;
  durationControl.value = 0;
  durationControl.max = video.duration;
  durationControl.addEventListener("input", setVideoDuration);

  soundControl.min = 0;
  soundControl.max = 10;
  soundControl.value = soundControl.max;
  soundControl.addEventListener("input", changeSoundVolume);

  dynamicBtn.addEventListener('click', soundOf);

  video.addEventListener('ended', () => {
    playBtn.classList.toggle('video__player-img--active');
    playerPlayBtn.classList.remove('active');
    video.currentTime = 0;
  })
});

function playStop () {
  playBtn.classList.toggle("video__player-img--active");
  playerPlayBtn.classList.toggle("active");

  if (video.paused) {
    video.play();
    intervalId = setInterval(updateDuration, 1000 / 30);
  } else {
    clearInterval(intervalId);
    video.pause();
  }
}

function setVideoDuration () {
  video.currentTime = durationControl.value;
  updateDuration();
}

function updateDuration () {
  durationControl.value = video.currentTime;

  let step = video.duration / 100;
  let persent = video.currentTime / step;

  durationControl.style.background = `linear-gradient(90deg, #E01F3D 0%, #E01F3D ${persent}%, #626262 ${persent}%)`;
}

function changeSoundVolume ()  {
  video.volume = soundControl.value / 10;

  if (video.volume === 0) {
    soundBtn.classList.add("active");
  } else {
    soundBtn.classList.remove("active");
  }
}

function soundOf () {
  if (video.volume === 0) {
    video.volume = soundLevel;
    soundControl.value = soundLevel * 10;
    soundBtn.classList.remove('active');
  } else {
    soundLevel = video.volume;
    video.volume = 0;
    soundControl.value = 0;
    soundBtn.classList.add('active');
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhbWJ1cmdlci1tZW51LmpzIiwibWFwLmpzIiwibW9kYWwuanMiLCJwbGF5ZXIuanMiLCJwcm9kdWN0cy5qcyIsInJld2lldnMuanMiLCJzY3JpcHQuanMiLCJzY3JvbGwuanMiLCJ0ZWFtLmpzIiwidmlkZW8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0NyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0NwSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGhhbWJ1cmdlckJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkICgnaGFtYnVyZ2VyQnV0dG9uJyk7XHJcbmNvbnN0IG1vYmlsZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICgnI2hhbWJ1cmdlck1lbnUnKTtcclxuXHJcbmhhbWJ1cmdlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGhhbWJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcclxuICBtb2JpbGVNZW51LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG5cclxufSk7IiwibGV0IG15TWFwO1xyXG5cclxuY29uc3QgaW5pdCA9ICgpID0+IHtcclxuICBteU1hcCA9IG5ldyB5bWFwcy5NYXAoXCJtYXBcIiwge1xyXG4gICAgY2VudGVyOiBbNTUuNzUxMjg1LCAzNy42MDA3NjZdLFxyXG4gICAgem9vbTogMTQsXHJcbiAgICBjb250cm9sczogW10sXHJcbn0pO1xyXG5cclxuY29uc3QgY29vcmRzID0gW1xyXG4gIFs1NS43NTg2OTYsIDM3LjU4MjM0NF0sXHJcbiAgWzU1Ljc1Nzg0OSwgMzcuNjI2MTExXSxcclxuICBbNTUuNzQ5NDI3LCAzNy42MDU1MTFdLFxyXG4gIFs1NS43NDQ1OTYsIDM3LjU4MTI2NF0sXHJcbl07XHJcblxyXG5jb25zdCBteUNvbGxlY3Rpb24gPSBuZXcgeW1hcHMuR2VvT2JqZWN0Q29sbGVjdGlvbih7fSwge1xyXG4gIGRyYWdnYWJsZTogZmFsc2UsXHJcbiAgaWNvbkxheW91dDogJ2RlZmF1bHQjaW1hZ2UnLFxyXG4gIGljb25JbWFnZUhyZWY6IFwiL2ltZy9kZXNpZ24vbWFya2VyLnBuZ1wiLFxyXG4gIGljb25JbWFnZVNpemU6IFs0NiwgNTddLFxyXG4gIGljb25JbWFnZU9mZnNldDogWy0zNSwgLTUyXSxcclxufSk7XHJcblxyXG5jb29yZHMuZm9yRWFjaChjb29yZCA9PiB7XHJcbiAgbXlDb2xsZWN0aW9uLmFkZChuZXcgeW1hcHMuUGxhY2VtYXJrKGNvb3JkKSk7XHJcbn0pO1xyXG5cclxubXlNYXAuZ2VvT2JqZWN0cy5hZGQobXlDb2xsZWN0aW9uKTtcclxuXHJcbm15TWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XHJcbn07XHJcblxyXG55bWFwcy5yZWFkeShpbml0KTsiLCJjb25zdCB2YWxpZGF0ZUZpZWxkcyA9IChmb3JtLCBmaWVsZHNBcnJheSkgPT4ge1xyXG4gIGZpZWxkc0FycmF5LmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgZmllbGQucmVtb3ZlQ2xhc3MoXCJmb3JtX19pbnB1dC1lcnJvclwiKTtcclxuXHJcbiAgICBpZiAoZmllbGQudmFsKCkudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgIGZpZWxkLmFkZENsYXNzKFwiZm9ybV9faW5wdXQtZXJyb3JcIik7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGVycm9yRmllbGRzID0gZm9ybS5maW5kKFwiLmZvcm1fX2lucHV0LWVycm9yXCIpO1xyXG5cclxuICByZXR1cm4gZXJyb3JGaWVsZHMubGVuZ3RoID09PSAwO1xyXG59XHJcblxyXG4kKCcuZm9ybScpLnN1Ym1pdChlID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IGZvcm0gPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgY29uc3QgbmFtZSA9IGZvcm0uZmluZChcIltuYW1lPSduYW1lJ11cIik7XHJcbiAgY29uc3QgcGhvbmUgPSBmb3JtLmZpbmQoXCJbbmFtZT0ncGhvbmUnXVwiKTtcclxuICBjb25zdCBjb21tZW50ID0gZm9ybS5maW5kKFwiW25hbWU9J2NvbW1lbnQnXVwiKTtcclxuICBjb25zdCB0byA9IGZvcm0uZmluZChcIltuYW1lPSd0byddXCIpO1xyXG5cclxuICBjb25zdCBtb2RhbCA9ICQoXCIjbW9kYWxcIik7XHJcbiAgY29uc3QgY29udGVudCA9IG1vZGFsLmZpbmQoXCIubW9kYWxfX2NvbnRlbnRcIik7XHJcblxyXG4gIG1vZGFsLnJlbW92ZUNsYXNzKFwiZXJyb3ItbW9kYWxcIilcclxuXHJcbiAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlRmllbGRzIChmb3JtLCBbbmFtZSwgcGhvbmUsIGNvbW1lbnQsIHRvXSk7XHJcblxyXG5cclxuICBpZiAoaXNWYWxpZCkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgdXJsOiBcImh0dHBzOi8vd2ViZGV2LWFwaS5sb2Z0c2Nob29sLmNvbS9zZW5kbWFpbFwiLFxyXG4gICAgICBtZXRob2Q6IFwicG9zdFwiLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgbmFtZTogbmFtZS52YWwoKSxcclxuICAgICAgICBwaG9uZTogcGhvbmUudmFsKCksXHJcbiAgICAgICAgY29tbWVudDogY29tbWVudC52YWwoKSxcclxuICAgICAgICB0bzogdG8udmFsKCksXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgY29udGVudC50ZXh0KGRhdGEubWVzc2FnZSlcclxuICAgICAgICAgICAgICQuZmFuY3lib3gub3Blbih7XHJcbiAgICAgICAgICAgICAgc3JjOiBcIi5tb2RhbFwiLFxyXG4gICAgICAgICAgICAgIHR5cGUgOiAnaW5saW5lJyxcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgICBlcnJvcjogKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEucmVzcG9uc2VKU09OLm1lc3NhZ2U7XHJcbiAgICAgIGNvbnRlbnQudGV4dChtZXNzYWdlKTtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgIG1vZGFsLmFkZENsYXNzKFwiZXJyb3ItbW9kYWxcIik7XHJcbiAgICAgICQuZmFuY3lib3gub3Blbih7XHJcbiAgICAgICAgc3JjOiBcIi5tb2RhbFwiLFxyXG4gICAgICAgIHR5cGUgOiAnaW5saW5lJyxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbiQoXCIuYXBwLWNsb3NlLW1vZGFsXCIpLmNsaWNrKGUgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgJC5mYW5jeWJveC5jbG9zZSAoKTtcclxufSlcclxuXHJcbiIsIi8vIGxldCBwbGF5ZXI7XHJcbi8vIGNvbnN0IHBsYXllckNvbnRhaW5lciA9ICQoJy5wbGF5ZXInKTtcclxuXHJcbi8vIGxldCBldmVudHNJbml0ID0gKCkgPT4ge1xyXG4vLyAgICQoXCIucGxheWVyX19zdGFydFwiKS5jbGljayhlID0+IHtcclxuLy8gICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbi8vICAgICBpZiAocGxheWVyQ29udGFpbmVyLmhhc0NsYXNzKFwicGF1c2VkXCIpKSB7XHJcbi8vICAgICAgIHBsYXllci5wYXVzZVZpZGVvKCk7XHJcbi8vICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICBwbGF5ZXIucGxheVZpZGVvKCk7XHJcbi8vICAgICB9XHJcbi8vICAgfSk7XHJcblxyXG4vLyAgICQoXCIucGxheWVyX19wbGF5YmFja1wiKS5jbGljayhlID0+IHtcclxuLy8gICAgIGNvbnN0IGJhciA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuLy8gICAgIGNvbnN0IGNsaWNrZWRQb3NpdGlvbiA9IGUub3JpZ2luYWxFdmVudC5sYXllclg7XHJcbi8vICAgICBjb25zdCBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQgPSAoY2xpY2tlZFBvc2l0aW9uIC8gYmFyLndpZHRoKCkpICogMTAwO1xyXG4vLyAgICAgY29uc3QgbmV3UGxheWJhY2tQb3NpdGlvblNlYyA9IChwbGF5ZXIuZ2V0RHVyYXRpb24oKSAvIDEwMCkgKiBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQ7XHJcblxyXG4vLyAgICAgJChcIi5wbGF5ZXJfX3BsYXliYWNrLWJ1dHRvblwiKS5jc3Moe1xyXG4vLyAgICAgICBsZWZ0OiBgJHtuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnR9JWBcclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIHBsYXllci5zZWVrVG8obmV3UGxheWJhY2tQb3NpdGlvblNlYyk7XHJcbi8vICAgfSk7XHJcblxyXG4vLyAgICQoXCIucGxheWVyX19zcGxhc2hcIikuY2xpY2soZSA9PiB7XHJcbi8vICAgICBwbGF5ZXIucGxheVZpZGVvKCk7XHJcbi8vICAgfSk7XHJcbi8vIH07XHJcblxyXG4vLyBjb25zdCBmb3JtYXRUaW1lID0gdGltZVNlYyA9PiB7XHJcbi8vICAgY29uc3Qgcm91bmRUaW1lID0gTWF0aC5yb3VuZCh0aW1lU2VjKTtcclxuXHJcbi8vICAgY29uc3QgbWludXRlcyA9IGFkZFplcm8oTWF0aC5mbG9vcihyb3VuZFRpbWUgLyA2MCkpO1xyXG4vLyAgIGNvbnN0IHNlY29uZHMgPSBhZGRaZXJvKHJvdW5kVGltZSAtIG1pbnV0ZXMgKiA2MCk7XHJcblxyXG4vLyAgIGZ1bmN0aW9uIGFkZFplcm8gKG51bSkge1xyXG4vLyAgICAgcmV0dXJuIG51bSA8IDEwID8gYDAke251bX1gIDogbnVtO1xyXG4vLyAgIH1cclxuXHJcbi8vICAgcmV0dXJuIGAke21pbnV0ZXN9IDogJHtzZWNvbmRzfWA7XHJcbi8vIH1cclxuXHJcbi8vIGNvbnN0IG9uUGxheWVyUmVhZHkgPSAoKSA9PiB7XHJcbi8vICAgbGV0IGludGVydmFsO1xyXG4vLyAgIGNvbnN0IGR1cmF0aW9uU2VjID0gcGxheWVyLmdldER1cmF0aW9uKCk7XHJcblxyXG4vLyAgICQoXCIucGxheWVyX19kdXJhdGlvbi1lc3RpbWF0ZVwiKS50ZXh0KGZvcm1hdFRpbWUoZHVyYXRpb25TZWMpKTtcclxuXHJcbi8vICAgaWYgKHR5cGVvZiBpbnRlcnZhbCAhPSBgdW5kZWZpbmVkYCkge1xyXG4vLyAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbi8vICAgfVxyXG5cclxuLy8gICBpbnRlcnZhbCA9IHNldEludGVydmFsICgoKSA9PiB7XHJcbi8vICAgICBjb25zdCBjb21wbGV0ZWRTZWMgPSBwbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcclxuLy8gICAgIGNvbnN0IGNvbXBsZXRlZFBlcmNlbnQgPSAoY29tcGxldGVkU2VjIC8gZHVyYXRpb25TZWMpICogMTAwO1xyXG5cclxuLy8gICAgICQoXCIucGxheWVyX19wbGF5YmFjay1idXR0b25cIikuY3NzKHtcclxuLy8gICAgICAgbGVmdDogYCR7Y29tcGxldGVkUGVyY2VudH0lYFxyXG4vLyAgICAgfSk7XHJcblxyXG4vLyAgICAgJChcIi5wbGF5ZXJfX2R1cmF0aW9uLWNvbXBsaXRlZFwiKS50ZXh0KGZvcm1hdFRpbWUoY29tcGxldGVkU2VjKSk7XHJcbi8vICAgfSwgMTAwMCk7XHJcbi8vIH07XHJcblxyXG4vLyBjb25zdCBvblBsYXllclN0YXRlQ2hhbmdlID0gZXZlbnQgPT4ge1xyXG4vLyAvKlxyXG4vLyAtMSAo0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1INCy0LjQtNC10L4g0L3QtSDQvdCw0YfQsNGC0L4pXHJcbi8vIDAgKNCy0L7RgdC/0YDQvtC40LfQstC10LTQtdC90LjQtSDQstC40LTQtdC+INC30LDQstC10YDRiNC10L3QvilcclxuLy8gMSAo0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1KVxyXG4vLyAyICjQv9Cw0YPQt9CwKVxyXG4vLyAzICjQsdGD0YTQtdGA0LjQt9Cw0YbQuNGPKVxyXG4vLyA1ICjQstC40LTQtdC+INC/0L7QtNCw0Y7RgiDRgNC10L/Qu9C40LrQuClcclxuLy8gKi9cclxuLy8gICBzd2l0Y2ggKGV2ZW50LmRhdGEpIHtcclxuLy8gICAgIGNhc2UgMTpcclxuLy8gICAgICAgcGxheWVyQ29udGFpbmVyLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4vLyAgICAgICBwbGF5ZXJDb250YWluZXIuYWRkQ2xhc3MoXCJwYXVzZWRcIik7XHJcbi8vICAgICAgIGJyZWFrO1xyXG5cclxuLy8gICAgIGNhc2UgMjpcclxuLy8gICAgICAgcGxheWVyQ29udGFpbmVyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4vLyAgICAgICBwbGF5ZXJDb250YWluZXIucmVtb3ZlQ2xhc3MoXCJwYXVzZWRcIik7XHJcbi8vICAgICAgIGJyZWFrOyBcclxuLy8gICB9XHJcbi8vIH07XHJcblxyXG4vLyBmdW5jdGlvbiBvbllvdVR1YmVJZnJhbWVBUElSZWFkeSgpIHtcclxuLy8gICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCd5dC1wbGF5ZXInLCB7XHJcbi8vICAgICBoZWlnaHQ6ICczOTInLFxyXG4vLyAgICAgd2lkdGg6ICc2NjInLFxyXG4vLyAgICAgdmlkZW9JZDogJ0RkMVZJZVRNR1FzJyxcclxuLy8gICAgIGV2ZW50czoge1xyXG4vLyAgICAgICBvblJlYWR5OiBvblBsYXllclJlYWR5LFxyXG4vLyAgICAgICBvblN0YXRlQ2hhbmdlOiBvblBsYXllclN0YXRlQ2hhbmdlLFxyXG4vLyAgICAgfSxcclxuLy8gICAgIHBsYXllclZhcnM6IHtcclxuLy8gICAgICAgY29udHJvbHM6IDAsXHJcbi8vICAgICAgIGRpc2FibGVrYjogMCxcclxuLy8gICAgICAgc2hvd2luZm86IDAsXHJcbi8vICAgICAgIHJlbDogMCxcclxuLy8gICAgICAgYXV0b3BsYXk6IDAsXHJcbi8vICAgICAgIG1vZGVzdGJyYW5kaW5nOiAwLFxyXG4vLyAgICAgfVxyXG4vLyAgIH0pO1xyXG4vLyB9XHJcblxyXG4vLyBldmVudHNJbml0KCk7XHJcblxyXG4iLCJjb25zdCBtZXN1cmVXaWR0aCA9IGl0ZW0gPT4ge1xyXG4gIGxldCByZXFJdGVtV2lkdGggPSAwO1xyXG4gIGNvbnN0IHNjcmVlbldpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcbiAgY29uc3QgY29udGFpbmVyID0gaXRlbS5jbG9zZXN0KFwiLnByb2R1Y3RzLW1lbnVcIik7XHJcbiAgY29uc3QgdGl0bGVCbG9jayA9IGNvbnRhaW5lci5maW5kKFwiLnByb2R1Y3RzLW1lbnVfX3RpdGxlXCIpO1xyXG4gIGNvbnN0IHRpdGxlV2lkdGggPSB0aXRsZUJsb2NrLndpZHRoKCkgKiB0aXRsZUJsb2NrLmxlbmd0aDtcclxuXHJcbiAgY29uc3QgdGV4dENvbnRhaW5lciA9IGl0ZW0uZmluZChcIi5wcm9kdWN0cy1tZW51X19jb250YWluZXJcIik7XHJcbiAgY29uc3QgcGFkZGluZ0xlZnQgPSBwYXJzZUludCh0ZXh0Q29udGFpbmVyLmNzcyhcInBhZGRpbmctbGVmdFwiKSk7XHJcbiAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQodGV4dENvbnRhaW5lci5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpKTtcclxuXHJcbiAgY29uc3QgaXNNb2JpbGUgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2OHB4KVwiKS5tYXRjaGVzO1xyXG5cclxuICBpZiAoaXNNb2JpbGUpIHtcclxuICAgIHJlcUl0ZW1XaWR0aCA9IHNjcmVlbldpZHRoIC0gdGl0bGVXaWR0aDtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVxSXRlbVdpZHRoID0gNTAwO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNvbnRhaW5lcjogcmVxSXRlbVdpZHRoLFxyXG4gICAgdGV4dENvbnRhaW5lcjogcmVxSXRlbVdpZHRoIC0gcGFkZGluZ1JpZ2h0IC0gcGFkZGluZ0xlZnRcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBjbG9zZUV2ZXJ5SXRlbUluQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4ge1xyXG4gIGNvbnN0IGl0ZW1zID0gY29udGFpbmVyLmZpbmQoXCIucHJvZHV0cy1tZW51X19pdGVtXCIpO1xyXG4gIGNvbnN0IGNvbnRlbnQgPSBjb250YWluZXIuZmluZChcIi5wcm9kdWN0cy1tZW51X19jb250ZW50XCIpO1xyXG5cclxuICBpdGVtcy5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICBjb250ZW50LndpZHRoKDApO1xyXG59O1xyXG5cclxuY29uc3Qgb3BlblByb2R1Y3QgPSAoaXRlbSkgPT4ge1xyXG4gIGNvbnN0IGhpZGRlbkNvbnRlbnQgPSBpdGVtLmZpbmQoXCIucHJvZHVjdHMtbWVudV9fY29udGVudFwiKTtcclxuICBjb25zdCByZXFXaWR0aCA9IG1lc3VyZVdpZHRoKGl0ZW0pO1xyXG4gIGNvbnN0IHRleHRCbG9jayA9IGl0ZW0uZmluZChcIi5wcm9kdWN0cy1tZW51X19jb250YWluZXJcIik7XHJcblxyXG4gIGl0ZW0uYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgaGlkZGVuQ29udGVudC53aWR0aChyZXFXaWR0aC5jb250YWluZXIpO1xyXG4gIHRleHRCbG9jay53aWR0aChyZXFXaWR0aC50ZXh0Q29udGFpbmVyKTtcclxufTtcclxuXHJcbiQoXCIucHJvZHVjdHMtbWVudV9fdGl0bGVcIikub24oXCJjbGlja1wiLCBlID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gIGNvbnN0IGl0ZW0gPSAkdGhpcy5jbG9zZXN0KFwiLnByb2R1dHMtbWVudV9faXRlbVwiKTtcclxuICBjb25zdCBwcm9kdWN0T3BlbmVkID0gaXRlbS5oYXNDbGFzcyhcImFjdGl2ZVwiKTtcclxuICBjb25zdCBjb250YWluZXIgPSAkdGhpcy5jbG9zZXN0KFwiLnByb2R1Y3RzLW1lbnVcIik7XHJcblxyXG4gIGlmIChwcm9kdWN0T3BlbmVkKSB7XHJcbiAgICBjbG9zZUV2ZXJ5SXRlbUluQ29udGFpbmVyKGNvbnRhaW5lcilcclxuICB9IGVsc2Uge1xyXG4gICAgY2xvc2VFdmVyeUl0ZW1JbkNvbnRhaW5lcihjb250YWluZXIpO1xyXG4gICAgb3BlblByb2R1Y3QoaXRlbSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbiQoXCIucHJvZHVjdHMtbWVudV9fY2xvc2VcIikub24oXCJjbGlja1wiLCBlID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNsb3NlRXZlcnlJdGVtSW5Db250YWluZXIoJCgnLnByb2R1Y3RzLW1lbnUnKSk7XHJcbn0pOyIsImNvbnN0IGZpbmRCbG9ja0J5QWxpYXMgPSBhbGlhcyA9PiB7XHJcbiAgcmV0dXJuICQoXCIucmV3aWV2c19faXRlbVwiKS5maWx0ZXIoKG5keCwgaXRlbSkgPT4ge1xyXG4gICAgcmV0dXJuICQoaXRlbSkuYXR0cihcImRhdGEtbGlua2VkLXdpdGhcIikgPT09IGFsaWFzO1xyXG4gIH0pXHJcbn1cclxuXHJcbiQoXCIuaW50ZXJhY3RpdmUtYXZhdGFyX19saW5rXCIpLmNsaWNrKGU9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCB0YXJnZXQgPSAkdGhpcy5hdHRyKFwiZGF0YS1vcGVuXCIpO1xyXG4gIGNvbnN0IGl0ZW1Ub1Nob3cgPSBmaW5kQmxvY2tCeUFsaWFzICh0YXJnZXQpO1xyXG4gIGNvbnN0IGN1ckl0ZW0gPSAkdGhpcy5jbG9zZXN0KFwiLnJld2lldnNfX3N3aXRjaGVyLWl0ZW1cIik7XHJcblxyXG4gIGl0ZW1Ub1Nob3cuYWRkQ2xhc3MoXCJhY3RpdmUtLWNsYXNzXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJhY3RpdmUtLWNsYXNzXCIpXHJcbiAgY3VySXRlbS5hZGRDbGFzcyhcImludGVyYWN0aXZlLWF2YXRhci0tYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJpbnRlcmFjdGl2ZS1hdmF0YXItLWFjdGl2ZVwiKTtcclxuXHJcbn0pOyIsImNvbnN0IGxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xlZnRcIik7XHJcbmNvbnN0IHJpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyaWdodFwiKTtcclxuY29uc3QgaXRlbXNMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpdGVtc1wiKTtcclxuXHJcbmNvbnN0IGxvb3AgPSAoZGlyZWN0aW9uLCBlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoZGlyZWN0aW9uID09PSBcInJpZ2h0XCIpIHtcclxuICAgIGl0ZW1zTGlzdC5hcHBlbmRDaGlsZChpdGVtc0xpc3QuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpdGVtc0xpc3QuaW5zZXJ0QmVmb3JlKGl0ZW1zTGlzdC5sYXN0RWxlbWVudENoaWxkLCBpdGVtcy5maXJzdEVsZW1lbnRDaGlsZCk7XHJcbiAgfVxyXG59O1xyXG5cclxucmlnaHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgbG9vcChcInJpZ2h0XCIsIGUpO1xyXG59KTtcclxuXHJcbmxlZnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgbG9vcChcImxlZnRcIiwgZSk7XHJcbn0pO1xyXG4vLyAkKCcuc2hvcF9fbGlzdCcpLmJ4U2xpZGVyKCk7IiwiY29uc3Qgc2VjdGlvbnMgPSAkKFwiLnNlY3Rpb25cIik7XHJcbmNvbnN0IGRpc3BsYXkgPSAkKFwiLm1haW5jb250ZW50XCIpO1xyXG5jb25zdCBzaWRlTWVudXMgPSAkKFwiLmZpeGVkLW1lbnVcIik7XHJcbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuLy8gY29uc3QgbW9iaWxlRGV0ZWN0ID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbi8vIGNvbnN0IGlzTW9iaWxlcyA9IG1vYmlsZURldGVjdC5tb2JpbGUoKTtcclxuXHJcbmxldCBpblNjcm9sbCA9IGZhbHNlO1xyXG5cclxuc2VjdGlvbnMuZmlyc3QoKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuXHJcbmNvbnN0IGNvdW50U2VjdGlvblBvc2l0aW9uID0gKHNlY3Rpb25FcSkgPT4ge1xyXG4gIHJldHVybiBzZWN0aW9uRXEgKiAtMTAwO1xyXG59XHJcblxyXG5jb25zdCBjaGFuZ2VNZW51VGhlbWVGb3JTZWN0aW9uID0gKHNlY3Rpb25FcSkgPT4ge1xyXG4gIGNvbnN0IGN1cnJlbnRTZWN0aW9ucyA9IHNlY3Rpb25zLmVxKHNlY3Rpb25FcSk7XHJcbiAgY29uc3QgbWVudVRoZW1lID0gY3VycmVudFNlY3Rpb25zLmF0dHIoXCJkYXRhLXNpZGVtZW51LXRoZW1lXCIpO1xyXG4gIGNvbnN0IGFjdGl2ZUNsYXNzc2lkZU1lbnUgPSBcImZpeGVkLW1lbnUtLXNoYWRvd2VkXCI7XHJcblxyXG4gIGlmIChtZW51VGhlbWUgPT09IFwid2hpdGVcIikge1xyXG4gICAgc2lkZU1lbnVzLmFkZENsYXNzKGFjdGl2ZUNsYXNzc2lkZU1lbnUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzaWRlTWVudXMucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3NzaWRlTWVudSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcGVyZm9ybVRyYW5zaXRpb24gPSAoc2VjdGlvbkVxKSA9PiB7XHJcblxyXG4gIGlmIChpblNjcm9sbCA9PT0gZmFsc2UpIHtcclxuICAgIGluU2Nyb2xsID0gdHJ1ZTtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gY291bnRTZWN0aW9uUG9zaXRpb24oc2VjdGlvbkVxKTtcclxuXHJcbiAgICBjb25zdCB0cmFuc2l0aW9uT3ZlciA9IDEwMDA7XHJcbiAgICBjb25zdCBtb3VzZUluZXJ0aWFsT3ZlciA9IDMwMDtcclxuXHJcblxyXG4gICAgY2hhbmdlTWVudVRoZW1lRm9yU2VjdGlvbihzZWN0aW9uRXEpO1xyXG5cclxuICAgIGRpc3BsYXkuY3NzKHtcclxuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgke3Bvc2l0aW9ufSUpYCxcclxuICAgIH0pO1xyXG5cclxuICAgIHNlY3Rpb25zLmVxKHNlY3Rpb25FcSkuYWRkQ2xhc3MoXCJhY3RpdmVcIikuc2libGluZ3MoKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaW5TY3JvbGwgPSBmYWxzZTtcclxuICAgICAgc2lkZU1lbnVzLmZpbmQoXCIuZml4ZWQtbWVudV9faXRlbVwiKS5lcShzZWN0aW9uRXEpLmFkZENsYXNzKFwiZml4ZWQtbWVudV9faXRlbS0tYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJmaXhlZC1tZW51X19pdGVtLS1hY3RpdmVcIik7XHJcbiAgICB9LCB0cmFuc2l0aW9uT3ZlciArIG1vdXNlSW5lcnRpYWxPdmVyKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCB2aWV3cG9ydFNjcm9sbGVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IGFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9ucy5maWx0ZXIoXCIuYWN0aXZlXCIpO1xyXG4gIGNvbnN0IG5leHRTZWN0aW9uID0gYWN0aXZlU2VjdGlvbi5uZXh0KCk7XHJcbiAgY29uc3QgcHJldlNlY3Rpb24gPSBhY3RpdmVTZWN0aW9uLnByZXYoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5leHQgKCkge1xyXG4gICAgICBpZiAobmV4dFNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcmV2ICgpIHtcclxuICAgICAgaWYgKHByZXZTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uKHByZXZTZWN0aW9uLmluZGV4KCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuJCh3aW5kb3cpLm9uKFwid2hlZWxcIiwgZSA9PiB7XHJcbiAgY29uc3QgZGVsdGFZID0gZS5vcmlnaW5hbEV2ZW50LmRlbHRhWTtcclxuICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuXHJcbiAgaWYgKGRlbHRhWSA+IDApIHtcclxuICAgIHNjcm9sbGVyLm5leHQoKTtcclxuICB9XHJcblxyXG4gIGlmIChkZWx0YVkgPCAwKSB7XHJcbiAgICBzY3JvbGxlci5wcmV2KCk7XHJcbiAgfVxyXG59KTtcclxuXHJcbiQod2luZG93KS5vbihcImtleWRvd25cIiwgZSA9PiB7XHJcblxyXG4gIGNvbnN0IHRhZ05hbWUgPSBlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgY29uc3QgdXNlclR5cGluZ0luSW5wdXRzID0gdGFnTmFtZSA9PT0gXCJpbnB1dFwiIHx8IHRhZ05hbWUgPT09IFwidGV4dGFyZWFcIjtcclxuICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuXHJcbiAgaWYgKHVzZXJUeXBpbmdJbklucHV0cykgcmV0dXJuO1xyXG5cclxuICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XHJcbiAgICAgIGNhc2UgMzg6IC8vcHJldlxyXG4gICAgICBzY3JvbGxlci5wcmV2KCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIFxyXG4gICAgICBjYXNlIDQwOiAvL25leHRcclxuICAgICAgc2Nyb2xsZXIubmV4dCgpO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn0pO1xyXG5cclxuJChcIi53cmFwcGVyXCIpLm9uKFwidG91Y2htb3ZlXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcclxuXHJcbiQoXCJbZGF0YS1zY3JvbGwtdG9dXCIpLmNsaWNrKGUgPT4ge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgY29uc3QgdGFyZ2V0ID0kdGhpcy5hdHRyKFwiZGF0YS1zY3JvbGwtdG9cIik7XHJcbiAgY29uc3QgcmVxU2VjdGlvbiA9ICQoYFtkYXRhLXNlY3Rpb24taWQ9JHt0YXJnZXR9XWApO1xyXG5cclxuIHBlcmZvcm1UcmFuc2l0aW9uKHJlcVNlY3Rpb24uaW5kZXgoKSk7IFxyXG59KTtcclxuXHJcbi8vIGlmIChpc01vYmlsZXMpIHtcclxuLy8gICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxyXG4vLyAkKFwiYm9keVwiKS5zd2lwZSh7XHJcbi8vICAgc3dpcGU6IGZ1bmN0aW9uIChldmVudCwgZGlyZWN0aW9uKSB7XHJcbi8vICAgICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuLy8gICAgIGxldCBzY3JvbGxEaXJlY3Rpb24gPSBcIlwiO1xyXG5cclxuLy8gICAgIGlmIChkaXJlY3Rpb24gPT09IFwidXBcIikgc2Nyb2xsRGlyZWN0aW9uID0gXCJuZXh0XCI7XHJcbi8vICAgICBpZiAoZGlyZWN0aW9uID09PSBcImRvd25cIikgc2Nyb2xsRGlyZWN0aW9uID0gXCJwcmV2XCI7XHJcblxyXG4vLyAgICAgc2Nyb2xsZXJbc2Nyb2xsRGlyZWN0aW9uXSgpO1xyXG4vLyAgIH0sXHJcbi8vIH0pO1xyXG4vLyB9O1xyXG5cclxuIiwiY29uc3Qgb3Blbkl0ZW0gPSBpdGVtID0+IHtcclxuICBjb25zdCBjb250YWluZXIgPSBpdGVtLmNsb3Nlc3QoXCIuaHVtYW5zX19pdGVtXCIpO1xyXG4gIGNvbnN0IGNvbnRlbnRCbG9jayA9IGNvbnRhaW5lci5maW5kKFwiLmh1bWFuX19kZXNjLWNsYXNzXCIpO1xyXG4gIGNvbnN0IHRleHRCbG9jayA9IGNvbnRlbnRCbG9jay5maW5kKFwiLmh1bWFuX19kZXNjLWNsYXNzLWJsb2NrXCIpO1xyXG4gIGNvbnN0IHJlcUhlaWdoID0gdGV4dEJsb2NrLmhlaWdodCgpO1xyXG5cclxuICBjb250YWluZXIuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgY29udGVudEJsb2NrLmhlaWdodChyZXFIZWlnaCk7XHJcbn1cclxuXHJcbmNvbnN0IGNsb3NlZEV2ZXJ5SXRlbSA9IGNvbnRhaW5lciA9PiB7XHJcbiAgY29uc3QgaXRlbXMgPSBjb250YWluZXIuZmluZCgnLmh1bWFuX19kZXNjLWNsYXNzJyk7XHJcbiAgY29uc3QgaXRlbUNvbnRhaW5lciA9IGNvbnRhaW5lci5maW5kKFwiLmh1bWFuc19faXRlbVwiKTtcclxuXHJcbiAgaXRlbUNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKVxyXG4gIGl0ZW1zLmhlaWdodCgwKTtcclxufVxyXG5cclxuJCgnLmh1bWFuX19kZXNjLW5hbWUnKS5jbGljayhlID0+IHtcclxuICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICBjb25zdCBjb250YWluZXIgPSAkdGhpcy5jbG9zZXN0KCcuaHVtYW5zJyk7XHJcbiAgY29uc3QgZWxlbUNvbnRhaW5lciA9ICR0aGlzLmNsb3Nlc3QoXCIuaHVtYW5zX19pdGVtXCIpO1xyXG5cclxuICBpZiAoZWxlbUNvbnRhaW5lci5oYXNDbGFzcyhcImFjdGl2ZVwiKSkge1xyXG4gICAgY2xvc2VkRXZlcnlJdGVtKGNvbnRhaW5lcik7XHJcbiAgfSBcclxuICAgZWxzZSB7XHJcbiAgICBjbG9zZWRFdmVyeUl0ZW0oY29udGFpbmVyKTtcclxuICAgIG9wZW5JdGVtKCR0aGlzKTtcclxuICAgIH1cclxufSk7IiwiY29uc3QgcGxheUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmlkZW9fX3BsYXllci1pbWdcIik7XHJcbmNvbnN0IHBsYXllclBsYXlCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmR1cmF0aW9uX19pbWdcIik7XHJcbmNvbnN0IHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXJcIik7XHJcbmNvbnN0IGR1cmF0aW9uQ29udHJvbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVyYXRpb25sZXZlbFwiKTtcclxuY29uc3Qgc291bmRDb250cm9sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaWNsZXZlbFwiKTtcclxuY29uc3Qgc291bmRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNvdW5kYnRuXCIpO1xyXG5jb25zdCBkeW5hbWljQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R5bmFtaWMnKTtcclxubGV0IGludGVydmFsSWQ7XHJcbmxldCBzb3VuZExldmVsO1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5U3RvcCk7XHJcbiAgbGV0IHBsYXlCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5XCIpO1xyXG5cclxuICBmb3IgKGxldCBpPTA7IGkgPCBwbGF5QnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgcGxheUJ1dHRvbnNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5U3RvcCk7XHJcbiAgfVxyXG5cclxuICBkdXJhdGlvbkNvbnRyb2wubWluID0gMDtcclxuICBkdXJhdGlvbkNvbnRyb2wudmFsdWUgPSAwO1xyXG4gIGR1cmF0aW9uQ29udHJvbC5tYXggPSB2aWRlby5kdXJhdGlvbjtcclxuICBkdXJhdGlvbkNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHNldFZpZGVvRHVyYXRpb24pO1xyXG5cclxuICBzb3VuZENvbnRyb2wubWluID0gMDtcclxuICBzb3VuZENvbnRyb2wubWF4ID0gMTA7XHJcbiAgc291bmRDb250cm9sLnZhbHVlID0gc291bmRDb250cm9sLm1heDtcclxuICBzb3VuZENvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGNoYW5nZVNvdW5kVm9sdW1lKTtcclxuXHJcbiAgZHluYW1pY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNvdW5kT2YpO1xyXG5cclxuICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsICgpID0+IHtcclxuICAgIHBsYXlCdG4uY2xhc3NMaXN0LnRvZ2dsZSgndmlkZW9fX3BsYXllci1pbWctLWFjdGl2ZScpO1xyXG4gICAgcGxheWVyUGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gMDtcclxuICB9KVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHBsYXlTdG9wICgpIHtcclxuICBwbGF5QnRuLmNsYXNzTGlzdC50b2dnbGUoXCJ2aWRlb19fcGxheWVyLWltZy0tYWN0aXZlXCIpO1xyXG4gIHBsYXllclBsYXlCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKTtcclxuXHJcbiAgaWYgKHZpZGVvLnBhdXNlZCkge1xyXG4gICAgdmlkZW8ucGxheSgpO1xyXG4gICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKHVwZGF0ZUR1cmF0aW9uLCAxMDAwIC8gMzApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xyXG4gICAgdmlkZW8ucGF1c2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpZGVvRHVyYXRpb24gKCkge1xyXG4gIHZpZGVvLmN1cnJlbnRUaW1lID0gZHVyYXRpb25Db250cm9sLnZhbHVlO1xyXG4gIHVwZGF0ZUR1cmF0aW9uKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUR1cmF0aW9uICgpIHtcclxuICBkdXJhdGlvbkNvbnRyb2wudmFsdWUgPSB2aWRlby5jdXJyZW50VGltZTtcclxuXHJcbiAgbGV0IHN0ZXAgPSB2aWRlby5kdXJhdGlvbiAvIDEwMDtcclxuICBsZXQgcGVyc2VudCA9IHZpZGVvLmN1cnJlbnRUaW1lIC8gc3RlcDtcclxuXHJcbiAgZHVyYXRpb25Db250cm9sLnN0eWxlLmJhY2tncm91bmQgPSBgbGluZWFyLWdyYWRpZW50KDkwZGVnLCAjRTAxRjNEIDAlLCAjRTAxRjNEICR7cGVyc2VudH0lLCAjNjI2MjYyICR7cGVyc2VudH0lKWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZVNvdW5kVm9sdW1lICgpICB7XHJcbiAgdmlkZW8udm9sdW1lID0gc291bmRDb250cm9sLnZhbHVlIC8gMTA7XHJcblxyXG4gIGlmICh2aWRlby52b2x1bWUgPT09IDApIHtcclxuICAgIHNvdW5kQnRuLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNvdW5kQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzb3VuZE9mICgpIHtcclxuICBpZiAodmlkZW8udm9sdW1lID09PSAwKSB7XHJcbiAgICB2aWRlby52b2x1bWUgPSBzb3VuZExldmVsO1xyXG4gICAgc291bmRDb250cm9sLnZhbHVlID0gc291bmRMZXZlbCAqIDEwO1xyXG4gICAgc291bmRCdG4uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNvdW5kTGV2ZWwgPSB2aWRlby52b2x1bWU7XHJcbiAgICB2aWRlby52b2x1bWUgPSAwO1xyXG4gICAgc291bmRDb250cm9sLnZhbHVlID0gMDtcclxuICAgIHNvdW5kQnRuLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gIH1cclxufSJdfQ==
